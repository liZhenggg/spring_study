
IOC
(Inversion of Control)控制反转，控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。

DI
(Dependency Injection)依赖注入,是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。
IOC和DI是同一个概念的不同角度描述。


AOP
(Aspect Oriented Programming)面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。


Spring注入
是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。


注入方式：
-- 设值注入
IOC容器自动调用bean的set方法为bean属性赋值。
<bean id="injectionService" class="main.java.com.lzg.ioc.injection.service.impl.InjectionServiceImpl">
	<property name="injectionDao" ref="injectionDao"></property>
</bean>

-- 构造注入
IOC容器自动调用bean构造方法为bean属性赋值。
<bean id="injectionService" class="main.java.com.lzg.ioc.injection.service.impl.InjectionServiceImpl">
    <constructor-arg name="injectionDao" ref="injectionDao"></constructor-arg>
</bean>


AOP中的
pointcut切入点

advice通知
方式: before,after-returning,after,after-throwing,around,parameters

introductions引入父类
<aop:declare-parents>
<aop:declare-parents types-matching="main.java.com.lzg.schema.advice.biz.*+"
	implement-interface="main.java.com.lzg.schema.advice.introductions.Fit"
	default-impl="main.java.com.lzg.schema.advice.introductions.FitImpl"/>

AspectJ